#swap
#procedure body
swap:       sll $t1, $a1, 2         #reg
            add $t1, $a0, $t1       #reg

            lw $t0, 0($t1)          #comment
            lw $t2, 4($t1)

            sw $t2, 0($t1)
            sw $t0, 4($t1)

#procedure return
            jr $ra                  #return to calling routine
#-----------------------------------------------------------------------------
#sort
#saving registers
sort:       addi $sp, $sp, -20      #make room on the stack for 5 registers
            sw $ra, 16($sp)         #save $ra on stack
            sw $s3, 12($sp)         #save $s3 on stack
            sw $s2, 8($sp)          #save $s2 on stack
            sw $s1, 4($sp)          #save $s1 on stack
            sw $s0, 0($sp)          #save $s0 on stack

#procedure body
            move $s2, $a0           #copy parameter $a0 into $s2 (save $a0)
            move $s3, $a1           #copy parameter $a1 into $s3 (save $a0)
            move $s0, $zero         #i=0
for1tst:    slt $t0, $s0, $s3       #reg $t0 = 0 if
            beq $t0, $zero, exit1   #go to exit1
            addi $s1, $s0, -1       #j=i-1
for2tst:    slti $t0, $s1, 0        #reg $t0=1 if $s1 < 0
            bne $t0, $zero, exit2   #go to exit2 if $s1 < 0
            sll $t1, $s1, 2         #reg $t1 = j*4
            add $t2, $s2, $t1       #reg $t2 = v+(j*4)
            lw $t3, 0($t2)          #reg $t3 = v[j]
            lw $t4, 4($t2)          #reg $t4 = v[j+1]
            slt $t0, $t4, $t3       #$t0 = - if $t4 < $t3
            beq $t0, $zero, exit2   #go to exit2
            move $a0, $s2           #1st parameter of swap is v
            move $a1, $s1           #2nd parameter of swap is jr
            jal swap                #swap
            addi $s1, $s1, -1       #j-=1
            j for2tst               #jump to test of inner loop
exit2:      addi $s0, $s0, 1        #i+=1
            j for1tst               #jump to test of outer loop

#restoring registers
exit1:      lw $s0, 0($sp)           #restore $s0 from stack
            lw $s1, 4($sp)           #restore $s1 from stack
            lw $s2, 8($sp)           #restore $s2 from stack
            lw $s3, 12($sp)          #restore $s3 from stack
            lw $ra, 16($sp)          #restore $sra from stack
            addi  $sp, $sp, 20       #restore stack pointer

#procedure return
            jr $ra                   #return to calling routine